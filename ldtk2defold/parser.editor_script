local parser = require "ldtk2defold.parser"

local M = {}

local function ends_with(path, ext)
    local main, filename, extension = path:match("(.-)([^\\/]-%.?([^%.\\/]*))$")
    return extension == ext
end

local function get_resource_path(path)
    local main, filename, extension = path:match("^(.-)([^\\/]-)(%.[^\\/%.]-)%.?$")
    return main, filename
end

function M.get_commands()
    return {
        {
            label = "Generate Tilemaps",
            locations = { "Edit", "Assets" },
            query = {
                selection = { type = "resource", cardinality = "one" }
            },
            active = function(opts)
                local path = editor.get(opts.selection, "path")
                return ends_with(path, "ldtk") or ends_with(path, "json")
            end,
            run = function(opts)
                local root, name, _ = get_resource_path(editor.get(opts.selection, "path"))
                local config = editor.prefs.get("ldtk.config_file")
                parser.parse(root, name, editor.get(opts.selection, "text"), config)
                return {}
            end
        },
        {
            label = 'Clear Tilemaps',
            locations = { 'Edit', 'Assets' },
            query = {
                selection = { type = 'resource', cardinality = 'one' }
            },
            active = function(opts)
                local path = editor.get(opts.selection, 'path')
                return ends_with(path, 'ldtk') or ends_with(path, 'json')
            end,
            run = function(opts)
                local root, name, _ = get_resource_path(editor.get(opts.selection, 'path'))
                local config = editor.prefs.get('ldtk.config_file')
                parser.clear(root, name, config)
                return {}
            end
        },
        {
            label = 'Change LDTK Config File',
            locations = { 'View' },
            run = function(opts)
                local result = editor.ui.show_resource_dialog({
                    extensions = { 'lua' },
                    title = 'Select Config File',
                })
                editor.prefs.set('ldtk.config_file', result)
            end
        }
    }
end

function M.get_prefs_schema()
    return {
        ['ldtk.config_file'] = editor.prefs.schema.string { default = '/config.lua' }
    }
end

return M
